@using Parking.UI.Models
@using Parking.UI.Services
@inject IEstacionamentoService EstacionamentoService
@inject ISnackbar Snackbar

<EditForm Model="@Estacionamento" OnValidSubmit="OnPostRegistrarSaidaAsync">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            Registrar saída de estacionamento
        </TitleContent>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined"
                                  T="DateTime?"
                                  Format="s"
                                  Label="Data de saída"
                                  @bind-Value="@Estacionamento.DataSaida"
                                  For="@(() => Estacionamento.DataSaida)"
                                  InputType="InputType.DateTimeLocal" />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancelar</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Registrar saída</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EstacionamentoTableModel Estacionamento { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    public async void OnPostRegistrarSaidaAsync()
    {
        try
        {
            await EstacionamentoService.UpdateEstacionamento(new UpdateEstacionamentoRequest(Estacionamento.Id, Estacionamento.DataEntrada, Estacionamento.DataSaida, null, null, Estacionamento.Veiculo!.Id));
            Submit();
        }
        catch
        {
            Snackbar.Add("Ocorreu um erro ao tentar enviar a requisição ao servidor. Tente novamente mais tarde!", Severity.Error);
        }
    }
}